/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta2

import (
	v1beta2 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObjectEndpointLister helps list ObjectEndpoints.
type ObjectEndpointLister interface {
	// List lists all ObjectEndpoints in the indexer.
	List(selector labels.Selector) (ret []*v1beta2.ObjectEndpoint, err error)
	// Get retrieves the ObjectEndpoint from the index for a given name.
	Get(name string) (*v1beta2.ObjectEndpoint, error)
	ObjectEndpointListerExpansion
}

// objectEndpointLister implements the ObjectEndpointLister interface.
type objectEndpointLister struct {
	indexer cache.Indexer
}

// NewObjectEndpointLister returns a new ObjectEndpointLister.
func NewObjectEndpointLister(indexer cache.Indexer) ObjectEndpointLister {
	return &objectEndpointLister{indexer: indexer}
}

// List lists all ObjectEndpoints in the indexer.
func (s *objectEndpointLister) List(selector labels.Selector) (ret []*v1beta2.ObjectEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta2.ObjectEndpoint))
	})
	return ret, err
}

// Get retrieves the ObjectEndpoint from the index for a given name.
func (s *objectEndpointLister) Get(name string) (*v1beta2.ObjectEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta2.Resource("objectendpoint"), name)
	}
	return obj.(*v1beta2.ObjectEndpoint), nil
}
